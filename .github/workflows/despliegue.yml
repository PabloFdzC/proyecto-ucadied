

name: Despliegue
on:
  workflow_run:
      workflows: [Node.js CI]
      branches: ["main"]
      types:
        - completed
jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1

    - name: 'Instalar OCI CLI'
      run: |
        curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
        chmod +x install.sh
        ./install.sh --accept-all-defaults
        echo "::add-path::/home/runner/bin"
        exec -l $SHELL

    - name: 'Arreglar Configuracion Archivo de Permisos'
      run: |
        oci setup repair-file-permissions --file /home/runner/.oci/config
        oci setup repair-file-permissions --file /home/runner/.oci/key.pem

    - name: 'Verifica Existencia de Instancia'
      run: |
        echo "::set-env name=INSTANCE_OCID::$( \
          oci compute instance list \
          --lifecycle-state RUNNING \
          --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
          --display-name cicd-demo \
          --query "data [0].id" \
          --raw-output \
        )"

    - name: 'Configurando archivos para llaves'
      run: |
        mkdir ~/.oci
        echo "[DEFAULT]" >> ~/.oci/config
        echo "user=${{secrets.OCI_CLI_USER}}" >> ~/.oci/config
        echo "fingerprint=${{secrets.OCI_CLI_FINGERPRINT}}" >> ~/.oci/config
        echo "pass_phrase=${{secrets.OCI_CLI_PASSPHRASE}}" >> ~/.oci/config
        echo "region=${{secrets.OCI_CLI_REGION}}" >> ~/.oci/config
        echo "tenancy=${{secrets.OCI_CLI_TENANCY}}" >> ~/.oci/config
        echo "key_file=~/.oci/key.pem" >> ~/.oci/config
        echo "${{secrets.OCI_KEY_CONTENT}}" >> ~/.oci/key.pem

    - name: 'Crear Instancia'
      if: ${{!env.INSTANCE_OCID}}
      run: |
        echo "::set-env name=INSTANCE_OCID::$( \
          oci compute instance launch \
            --compartment-id ${{secrets.VM_COMPARTMENT_OCID}} \
            --availability-domain ${{secrets.VM_AVAILABILITY_DOMAIN}} \
            --shape ${{secrets.VM_SHAPE}} \
            --assign-public-ip true \
            --display-name cicd-demo \
            --image-id ${{secrets.VM_CUSTOM_IMAGE_OCID}} \
            --ssh-authorized-keys-file /home/runner/.oci/id_vm.pub \
            --subnet-id ${{secrets.VM_SUBNET_OCID}} \
            --wait-for-state RUNNING \
            --query "data.id" \
            --raw-output \
        )"

    - name: 'Obtener IP de Instancia'
      run: |
        echo "::set-env name=INSTANCE_IP::$( \
          oci compute instance list-vnics \
          --instance-id ${{env.INSTANCE_OCID}} \
          --query 'data [0]."public-ip"' \
          --raw-output \
        )"

    - name: 'Esperar por SSH'
      run: |
        while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
                sleep 5
                echo "SSH not available..."
        done; echo "SSH ready!"

    - name: 'Detener App'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.INSTANCE_IP }}
        username: opc
        key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        script: |
          pid=`lsof -i tcp:8080 | tail -n +2 | awk '{print $2}'`
          if [ "$pid" == "" ]; then
            echo "Process not found"
          else
            kill -9 $pid
          fi
          sudo mkdir -p /app

    - name: 'Descargar artifact del build'
        uses: actions/download-artifact@v2
        with:
          name: node-app


    - name: 'Enviar zip'
      uses: appleboy/scp-action@master
      with:
        host: ${{ env.INSTANCE_IP }}
        username: opc
        key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        source: "proyecto-ucadied.zip"
        target: "app"
        strip_components: 2

    - name: 'Correr App'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.INSTANCE_IP }}
        username: opc
        key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        script: |
          cd app 
          sudo unzip proyecto-ucadied.zip
          NODE_ENV=production node app.js
